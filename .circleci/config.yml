# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  slack: circleci/slack@4.12.5

parameters:
  EKS_NAMESPACE:
    type: string
    default: "miraki"
  IMAGE_TAG:
    type: string
    default: "0.1.6"

jobs:
  build_push_deploy_prod:
    docker:
      - image: cimg/python:3.10.5
    steps:
      - setup_remote_docker
      - checkout
      - run: pip install awscli
      - run:
          name: "Configure AWS credentials"
          command: |
            aws configure set aws_access_key_id AKIATO76J2JT2D4VVSO7 && aws configure set aws_secret_access_key 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 && aws configure set default.region ap-south-1
      - run:
          name: "Deploy to prod"
          command: |
            sudo apt-get update
            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
            aws eks --region ap-south-1 update-kubeconfig --name eks-miraki
            echo Namespace -- << pipeline.parameters.EKS_NAMESPACE >>
            cat ./kubernetes/namespaces/production.yaml        | sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g"  | kubectl apply -f -
            cat ./kubernetes/secrets/django.yaml               | sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g"  | kubectl apply -f -
            cat ./kubernetes/secrets/postgres.yaml             | sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g"  | kubectl apply -f -
            cat ./kubernetes/configmaps/django.yaml            | sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g"  | kubectl apply -f -
            cat ./kubernetes/configmaps/postgres.yaml          | sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g"  | kubectl apply -f -
            cat ./kubernetes/pv-pvc/postgres-pv-pvc.yaml       | sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g"  | kubectl apply -f -


            cat ./kubernetes/namespaces/production.yaml |      sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g"  | kubectl apply -f - 
            cat ./kubernetes/django.yaml |                     sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g"  | sed "s/{IMAGE_TAG}/<< pipeline.parameters.IMAGE_TAG >>/g" | kubectl apply -f - 
            cat ./kubernetes/postgres.yaml |                   sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g" |  sed "s/{IMAGE_TAG}/<< pipeline.parameters.IMAGE_TAG >>/g" | kubectl apply -f -
            cat ./kubernetes/celerybeat.yaml |                 sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g" |  sed "s/{IMAGE_TAG}/<< pipeline.parameters.IMAGE_TAG >>/g" | kubectl apply -f -
            cat ./kubernetes/celeryworker.yaml |               sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g" |  sed "s/{IMAGE_TAG}/<< pipeline.parameters.IMAGE_TAG >>/g" | kubectl apply -f -
            cat ./kubernetes/flower.yaml |                     sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g" |  sed "s/{IMAGE_TAG}/<< pipeline.parameters.IMAGE_TAG >>/g" | kubectl apply -f -
            cat ./kubernetes/redis.yaml |                      sed "s/{EKS_NAMESPACE}/<< pipeline.parameters.EKS_NAMESPACE >>/g" |  sed "s/{IMAGE_TAG}/<< pipeline.parameters.IMAGE_TAG >>/g" | kubectl apply -f -
             
      - slack/notify:
          channel: C05DBCM563U
          event: fail
          mentions: '@Channel'
          template: basic_fail_1
      - slack/notify:
          channel: C05DBCM563U
          event: pass
          mentions: '@Channel'
          template: success_tagged_deploy_1

  build_and_push_image:
    docker:
      - image: cimg/python:3.10.5
    steps:
      - checkout
      - setup_remote_docker
      - run: pip install awscli
      - run:
          name: "Configure AWS credentials"
          command: |
            aws configure set aws_access_key_id AKIATO76J2JT2D4VVSO7 && aws configure set aws_secret_access_key 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 && aws configure set default.region ap-south-1
      - run:
          name: "Build and push image"
          command: |
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 238367134311.dkr.ecr.ap-south-1.amazonaws.com
            echo "Building image" 
            cat production.yml | sed "s/{IMAGE_TAG}/<< pipeline.parameters.IMAGE_TAG >>/g" | docker-compose -f - build
            cat production.yml | sed "s/{IMAGE_TAG}/<< pipeline.parameters.IMAGE_TAG >>/g" | docker-compose -f - push
      - slack/notify:
          channel: C05BV0S9JBC
          event: fail
          mentions: '@Channel'
          template: basic_fail_1
      - slack/notify:
          channel: C05BV0S9JBC
          event: pass
          mentions: '@Channel'
          template: success_tagged_deploy_1


workflows:
  build_push_deploy_workflow:
    jobs:
      - build_push_deploy_prod:
          filters:
            branches:
              only: main
          context: slack-secrets
      - build_and_push_image:
          filters:
            branches:
              only: production
          context: slack-secrets
